docker build -t aspnetapp .
docker run -d -p 5000:5000 --name myapp aspnetapp

docker build -t angular .
docker run -dp 4200:4200 angular


Проэкт полностью соответствует ТЗ. Интерфейс состоит из трех главных блоков:
Панель выбора напитка, Монетоприемник, "Сенсорный дисплей".
Основное взаимодействие торгового автомата с пользователем, осуществляется через блок "Сенсорный дисплей".
Также периодически в нижней части сайта будут выскакивать "Контекстные сообщения".

Для запуска проэкта нужно отдельно запустить asp.net core 
и отдельно запустить в консоле webpack-dev-server, через npm run start .

Проэкт также выложен на гите https://github.com/zheka737/VendingMachine.git (но у него нет mdf файла).
Ссылка для входа в админку: http://localhost:4200/admin/737/beverages
Из необязательных требований реализовано: 
    •	Возможность импорта напитков (в админке, вкладка Напитки, кнопка Импорт). 
    Принимает json файлы со след. структурой и добавляет напитки:
    {
        "beverages": [
            {
                "name": "test1",
                "cost": 5,
                "quantity": 10		
            },
                    {
                "name": "test2",
                "cost": 7,
                "quantity": 7		
            }
        ]
    }

    •	Возможность покупки нескольких напитков перед получением сдачи
    Автомат после выдачи напитка будет предлагать Продолжить покупки и Забрать сдачу.

Нюансы: 
1. Добавлена кнопка Возврат денег, на случай если пользователь передумает покупать напитки.
2. Могут быть ситуации когда в автомате не будет достаточного количества монет
или монет необходимого номинала для выдачи сдачи. В этом случае торгового автомат сообщит об этом на "Сенсорном дисплее"
и пользователь сможет вернуть свои деньги через кнопку Возврат денег. 
3. Список вставленных монет хранится в Sql, поэтому перезагрузка клиента/сервера их не сбрасует)